// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace CashFlow.FeatureTests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DailyConsolidatedReportFeature : object, Xunit.IClassFixture<DailyConsolidatedReportFeature.FixtureData>, Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en-US"), "Features", "Daily Consolidated Report", "    As a user of the cash flow system\n    I want to obtain a daily consolidated r" +
                "eport\n    So that I can view the total credits, debits, and the overall total fo" +
                "r a specific day", global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "DailyConsolidatedReport.feature"
#line hidden
        
        public DailyConsolidatedReportFeature(DailyConsolidatedReportFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 8
    #line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "date",
                        "value",
                        "type"});
            table1.AddRow(new string[] {
                        "\"2025-04-01\"",
                        "10.50",
                        "\"C\""});
            table1.AddRow(new string[] {
                        "\"2025-04-02\"",
                        "5.50",
                        "\"D\""});
            table1.AddRow(new string[] {
                        "\"2025-04-02\"",
                        "13.11",
                        "\"C\""});
            table1.AddRow(new string[] {
                        "\"2025-04-02\"",
                        "20.08",
                        "\"C\""});
            table1.AddRow(new string[] {
                        "\"2025-04-02\"",
                        "2.00",
                        "\"D\""});
            table1.AddRow(new string[] {
                        "\"2025-04-03\"",
                        "5.00",
                        "\"D\""});
#line 9
        await testRunner.GivenAsync("I have the following entries in my database:", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Successfully generate daily consolidated report")]
        [Xunit.TraitAttribute("FeatureTitle", "Daily Consolidated Report")]
        [Xunit.TraitAttribute("Description", "Successfully generate daily consolidated report")]
        [Xunit.InlineDataAttribute("\"resumed\"", "\"2025-04-02\"", "33.19", "7.50", "25.69", "true", new string[0])]
        [Xunit.InlineDataAttribute("\"extended\"", "\"2025-04-02\"", "33.19", "7.50", "25.69", "true", new string[0])]
        public async global::System.Threading.Tasks.Task SuccessfullyGenerateDailyConsolidatedReport(string type, string date, string credits, string debits, string total, string closed, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("type", type);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("credits", credits);
            argumentsOfScenario.Add("debits", debits);
            argumentsOfScenario.Add("total", total);
            argumentsOfScenario.Add("closed", closed);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Successfully generate daily consolidated report", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 19
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
#line 20
        await testRunner.GivenAsync(string.Format("{0} as a consultation date", date), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 21
        await testRunner.WhenAsync(string.Format("I request the consolidated report of the type {0} for the consultation date", type), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 22
        await testRunner.ThenAsync("the response status code of the Consolidated endpoint should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "date",
                            "totalCredits",
                            "totalDebits",
                            "netBalance",
                            "isClosed"});
                table2.AddRow(new string[] {
                            string.Format("{0}", date),
                            string.Format("{0}", credits),
                            string.Format("{0}", debits),
                            string.Format("{0}", total),
                            string.Format("{0}", closed)});
#line 23
        await testRunner.AndAsync("the report should contain:", ((string)(null)), table2, "And ");
#line hidden
#line 26
        await testRunner.AndAsync("the NetBalance value should be the result of credits-debits", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Generate report for date with no entries")]
        [Xunit.TraitAttribute("FeatureTitle", "Daily Consolidated Report")]
        [Xunit.TraitAttribute("Description", "Generate report for date with no entries")]
        [Xunit.InlineDataAttribute("\"resumed\"", "\"2025-05-01\"", "true", new string[0])]
        [Xunit.InlineDataAttribute("\"extended\"", "\"2025-05-01\"", "true", new string[0])]
        public async global::System.Threading.Tasks.Task GenerateReportForDateWithNoEntries(string type, string date, string closed, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("type", type);
            argumentsOfScenario.Add("date", date);
            argumentsOfScenario.Add("closed", closed);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Generate report for date with no entries", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 34
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
#line 35
        await testRunner.GivenAsync(string.Format("{0} as a consultation date", date), ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 36
        await testRunner.AndAsync("there are no entries for this date", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 37
        await testRunner.WhenAsync(string.Format("I request the consolidated report of the type {0} for the consultation date", type), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 38
        await testRunner.ThenAsync("the response status code of the Consolidated endpoint should be 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "date",
                            "totalCredits",
                            "totalDebits",
                            "netBalance",
                            "isClosed"});
                table3.AddRow(new string[] {
                            string.Format("{0}", date),
                            "0.00",
                            "0.00",
                            "0.00",
                            string.Format("{0}", closed)});
#line 39
        await testRunner.AndAsync("the report should contain:", ((string)(null)), table3, "And ");
#line hidden
#line 42
        await testRunner.AndAsync("the NetBalance value should be the result of credits-debits", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Fail to request report with invalid date")]
        [Xunit.TraitAttribute("FeatureTitle", "Daily Consolidated Report")]
        [Xunit.TraitAttribute("Description", "Fail to request report with invalid date")]
        [Xunit.InlineDataAttribute("\"resumed\"", new string[0])]
        [Xunit.InlineDataAttribute("\"extended\"", new string[0])]
        public async global::System.Threading.Tasks.Task FailToRequestReportWithInvalidDate(string type, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("type", type);
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Fail to request report with invalid date", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 50
    this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 8
    await this.FeatureBackgroundAsync();
#line hidden
#line 51
        await testRunner.GivenAsync("\"invalid\" as a consultation date", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 52
        await testRunner.WhenAsync(string.Format("I request the consolidated report of the type {0} for the consultation date", type), ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 53
        await testRunner.ThenAsync("the response status code of the Consolidated endpoint should be 400", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 54
        await testRunner.AndAsync("the response should contain an error message \"The date format is invalid. Use \'yy" +
                        "yy-MM-dd\'.\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.InitializeAsync()
            {
                await DailyConsolidatedReportFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task Xunit.IAsyncLifetime.DisposeAsync()
            {
                await DailyConsolidatedReportFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
